#pragma kernel CSMain

RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;
float2 _PixelOffset;
float _maxNumberOfBounces;
float4 _directionalLight;
float4 _directionalLightColor;

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y; //this calc is done by using the formula P(t)y = Oy+t*Dty and P(t)y=0;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.xyz;
    float p1 = -dot(ray.direction, d); //gives us the point that approaches closest to the center
    float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w; // long calc but put simple substitute p(t) = O+tDx in ||P-C||squared = r2 (point - center mag must be equal to the radius of sphere for the point to be on the sphere.)
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.xyz);
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);
    for (int i = 0; i < 2; i++)
    {
        for (int z = 0; z < 2; z++)
        {
            for (int y = 3; y < 6; y++)
                IntersectSphere
        (ray, bestHit, float4(i * 3, y * 3, z * 3, 1));
        }
    }
        
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit, float4 directionalLight)
{
    if (hit.distance < 1.#INF)
    {
        float3 albedo = float3(0.4f,0.4f,0.4f);
        float3 specular = float3(0.1f, 0.1f, 0.1f); // This will determine the energy lost on hit

        // Reflect the ray and multiply energy with specular reflection
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= specular;
        Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * directionalLight.xyz);
        RayHit shadowHit = Trace(shadowRay);
        if (shadowHit.distance != 1.#INF)
        {
            return float3(0.0f, 0.0f, .0f);
        }
        // Return defuse
        return saturate(dot(hit.normal, directionalLight.xyz) * -1) * directionalLight.w * albedo; //+ saturate(dot(hit.normal, float3(0.4f, -1.0f, -0.3f)) * -1) * _directionalLight.w * albedo;
    }
    else
    {
        // Sample the skybox and write it
        ray.energy = 0.0f;
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}



[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);
    //float2 uv = float2((id.xy + float2(0.5f,0.5f)) / float2(width, height) * 2.0f - 1.0f);//anti aliasing off 
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f); /// gets the uv from the cam texture // anti aliasing on 
    Ray ray = CreateCameraRay(uv);
    RayHit hit = Trace(ray);
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < _maxNumberOfBounces; i++)//for adding bounces to the ray actual ray tracing
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit, _directionalLight);//energy is depleted everybounce but the specular adds up
        if (!any(ray.energy))
            break;
    }
    Result[id.xy] = float4(result, 1);
    //Result[id.xy] = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0);
}
